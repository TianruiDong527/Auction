"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutdatedVersionChecker = void 0;
const semver_1 = __importDefault(require("semver"));
const npm_registry_fetch_1 = __importDefault(require("npm-registry-fetch"));
class OutdatedVersionChecker {
    async isVersionOutdated(hardhatTenderlyVersion) {
        let hardhatTenderlyVersionRangeToFind;
        if (semver_1.default.major(hardhatTenderlyVersion) === 1) {
            hardhatTenderlyVersionRangeToFind = "^1.0.0";
        }
        else {
            hardhatTenderlyVersionRangeToFind = "^2.0.0";
        }
        const latestHardhatTenderlyVersion = await this._getLatestHardhatTenderlyVersionsInRange(hardhatTenderlyVersionRangeToFind);
        if (semver_1.default.compare(hardhatTenderlyVersion, latestHardhatTenderlyVersion) === -1) {
            return [true, latestHardhatTenderlyVersion];
        }
        return [false, latestHardhatTenderlyVersion];
    }
    async _getLatestHardhatTenderlyVersionsInRange(versionRange) {
        const data = await npm_registry_fetch_1.default.json("/@tenderly/hardhat-tenderly");
        const versions = Object.keys(data.versions);
        return semver_1.default.maxSatisfying(versions, versionRange);
    }
}
exports.OutdatedVersionChecker = OutdatedVersionChecker;
//# sourceMappingURL=OutdatedVersionChecker.js.map