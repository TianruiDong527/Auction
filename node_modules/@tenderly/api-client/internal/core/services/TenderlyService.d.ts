import { Principal, Project, TenderlyAddContractRequest, TenderlyContractUploadRequest, TenderlyForkContractUploadRequest, TenderlyNetwork, TenderlyVerifyContractsRequest, VerifyContractABIRequest, VerifyContractABIResponse } from "../types";
export declare class TenderlyService {
    private pluginName;
    constructor(pluginName: string);
    getNetworks(): Promise<TenderlyNetwork[]>;
    getLatestBlockNumber(networkId: string): Promise<string | null>;
    verifyContracts(request: TenderlyContractUploadRequest): Promise<void>;
    pushContracts(request: TenderlyContractUploadRequest, tenderlyProject: string, username: string): Promise<void>;
    verifyContractABI(username: string, project: string, verificationType: string, request: VerifyContractABIRequest): Promise<VerifyContractABIResponse>;
    private verifyContractABIOnProject;
    private verifyContractABIOnVnet;
    verifyContractsMultiCompiler(request: TenderlyVerifyContractsRequest): Promise<void>;
    pushContractsMultiCompiler(request: TenderlyVerifyContractsRequest, tenderlyProject: string, username: string): Promise<void>;
    verifyForkContracts(request: TenderlyForkContractUploadRequest, tenderlyProject: string, username: string, fork: string): Promise<void>;
    verifyForkContractsMultiCompiler(request: TenderlyVerifyContractsRequest, tenderlyProject: string, username: string, forkID: string): Promise<void>;
    addContractToProject(username: string, project: string, request: TenderlyAddContractRequest): Promise<void>;
    getPrincipal(): Promise<Principal | null>;
    getProjectSlugs(principalId: string): Promise<Project[]>;
    verifyDevnetContractsMultiCompiler(request: TenderlyVerifyContractsRequest, tenderlyProject: string, username: string, devnetID: string, accessKey?: string): Promise<void>;
}
//# sourceMappingURL=TenderlyService.d.ts.map